generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model School {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique
  email String?
  logo String?
  key String?
  address String
  lang String
  type String?
  inscription BigInt
  createdAt   DateTime     @default(now())
  schoolyears Schoolyear[]
  admins Admin[]
  // auths Auth[]
  teachers Teacher[]
  classes Class[]
  students Student[]
  subjects Subject[]
  events Event[]
  parents Parent[]
  lessons Lesson[]
  deefaultSessions DefaultSession[]
}
model Schoolyear {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime     @default(now())
  endedAt   DateTime?     
  schoolId String @db.Uuid
  school      School       @relation(fields: [schoolId], references: [id])
  classYears ClassYear[]
  semestres Mestre[]
  studentFees StudentFees[]
  activate Boolean? @default(false)
  current Boolean  @default(false)
  title String?
}
model Admin {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username String
  email String 
  password String
  schoolId String @db.Uuid
  school      School       @relation(fields: [schoolId], references: [id])
  deleted Boolean @default(false)
}
model Student {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username    String       
  email       String?      @unique
  phone       String?      @unique
  address     String?
  img         String?
  imgKey String?
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String? @db.Uuid
  parent      Parent?       @relation(fields: [parentId], references: [id])
  attendances Attendance[]
  results     Result[]
  password    String
  matricule String
  classYears ClassYear[]
  studentFees StudentFees[]
  currentClassId String? @db.Uuid
  currentClass      Class?       @relation(fields: [currentClassId], references: [id])
  deleted Boolean @default(false)
  schoolId String @db.Uuid
  school      School       @relation(fields: [schoolId], references: [id])
}
model ClassYear {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolYearId String @db.Uuid
  createdAt DateTime @default(now())
  classId String @db.Uuid
  Inscription BigInt
  studentId String @db.Uuid
  schoolYear       Schoolyear        @relation(fields: [schoolYearId], references: [id])
  class       Class        @relation(fields: [classId], references: [id])
  student       Student        @relation(fields: [studentId], references: [id])
  isSolded Boolean @default(false)
  result Result[]
  // cette table servira pour les historiques, en une année précise on pourra savoir tel élève fréquentait tel année 
}
model Teacher {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username  String
  email     String   
  phone     String?   
  address   String?
  password String
  img       String?
  imgKey    String?
  deleted Boolean @default(false)
  schoolId String? @db.Uuid
  school       School?        @relation(fields: [schoolId], references: [id])
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
  exams Exam[]
}
model Parent {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username  String    @unique
  email     String?   @unique
  phone     String    @unique
  password String
  address   String?
  createdAt DateTime  @default(now())
  students  Student[]
  schoolId String @db.Uuid
  school     School      @relation(fields: [schoolId], references: [id])    
 
  deleted Boolean @default(false)
}
model Class {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String  
  supervisorId  String? @db.Uuid
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  classYears ClassYear[]
  lessons LessonClass[]
  currentStudents Student[]
  announcements AnnouncementClass[]
  deleted Boolean @default(false)
  schoolId String @db.Uuid
  school       School        @relation(fields: [schoolId], references: [id])
  feesId String @db.Uuid
  fees       Fees        @relation(fields: [feesId], references: [id])
  exams Exam[]
}
model Subject {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String   
  credit Int @default(1)
  teachers Teacher[]
  lessons  Lesson[]
  exams       Exam[]
  schoolId String @db.Uuid
  school       School        @relation(fields: [schoolId], references: [id])
  deleted Boolean @default(false)

}
model LessonClass {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lessonId   String @db.Uuid
  lesson     Lesson      @relation(fields: [lessonId], references: [id])
  classId   String @db.Uuid
  class     Class      @relation(fields: [classId], references: [id])   
}
model Lesson {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  classes LessonClass[]
  startTime DateTime
  endTime   DateTime
  subjectId   String @db.Uuid
  subject     Subject      @relation(fields: [subjectId], references: [id])
  teacherId   String @db.Uuid
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  attendances Attendance[]
  schoolId String @db.Uuid
  school      School       @relation(fields: [schoolId], references: [id])
  files String[] @default([])
  keys String[] @default([])
  
}
model Mestre {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type String
  order Int
  startTime DateTime?
  endTime   DateTime?
  schoolYearId String @db.Uuid
  schoolYear     Schoolyear      @relation(fields: [schoolYearId], references: [id])    
  deleted Boolean @default(false)
  session SessionSequence[]
}
model SessionSequence  {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type String 
  order Int
  startTime DateTime?
  endTime   DateTime?
  mestreId String @db.Uuid
  mestre     Mestre      @relation(fields: [mestreId], references: [id])   
  sessions Session[] 
}
model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  percentage Int
  title String
  sessionSequenceId String @db.Uuid
  exams Exam[]
  sessionSequence     SessionSequence      @relation(fields: [sessionSequenceId], references: [id])     
}
model DefaultSession {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  precentage Int
  title String
  schoolId String @db.Uuid
  school       School        @relation(fields: [schoolId], references: [id])
}
model Exam {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startTime DateTime
  credit Int @default(1)
  endTime   DateTime
  subjectId String @db.Uuid
  files String[] @default([])
  keys String[] @default([])
  teacherId   String @db.Uuid
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  classes Class[]
  type String
  subject   Subject   @relation(fields: [subjectId], references: [id])
  results  Result[]
  attendances Attendance[]
  sessionId String @db.Uuid
  session     Session      @relation(fields: [sessionId], references: [id])  
}
model Tranche{
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order Int
  amount BigInt
  feesId String @db.Uuid
  fees     Fees      @relation(fields: [feesId], references: [id])
  historiques HistoriqueFees[]

}
model Fees {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tranches Tranche[]
  classes Class[]
  deleted Boolean @default(false)
  studentFees StudentFees[]
}
model StudentFees {
   id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   amount BigInt
   studentId String @db.Uuid
   student     Student      @relation(fields: [studentId], references: [id])
   schoolYearId String @db.Uuid
   schoolYear     Schoolyear      @relation(fields: [schoolYearId], references: [id])
   FeesId String @db.Uuid
   fees     Fees      @relation(fields: [FeesId], references: [id])
   deleted Boolean @default(false)
   historiques HistoriqueFees[]
}
model HistoriqueFees {
   id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   amount BigInt
   createdAt DateTime @default(now())
   FeesId String @db.Uuid
   fees     StudentFees      @relation(fields: [FeesId], references: [id])
   trancheId String? @db.Uuid
   tranche     Tranche?      @relation(fields: [trancheId], references: [id])
   fr String
   eng String
   img String?
   key String?
   month String?
 }




model Result {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rating Int
  examId       String? @db.Uuid
  exam         Exam?       @relation(fields: [examId], references: [id])
  studentId    String @db.Uuid
  deleted Boolean @default(false)
  classYearId    String @db.Uuid
  classYear         ClassYear       @relation(fields: [classYearId], references: [id])
  student      Student     @relation(fields: [studentId], references: [id])
}
model Attendance {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  time BigInt
  studentId String @db.Uuid
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  String? @db.Uuid
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  examenId String? @db.Uuid
  examen Exam? @relation(fields: [examenId],references:[id])
}
model Event {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  title       String
  description String
  startTime   DateTime?
  endTime     DateTime?
  schoolId String @db.Uuid
  school       School        @relation(fields: [schoolId], references: [id])
}
model AnnouncementClass {
   id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  announcementId String @db.Uuid
  classId String @db.Uuid
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  class   Class @relation(fields: [classId], references: [id])

}
model Announcement {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String
  date        DateTime?
  announcementClass AnnouncementClass[]
  
}
enum UserSex {
  MALE
  FEMALE
}
enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}