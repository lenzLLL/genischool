generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id String @id
  name String @unique
  email String?
  logo String?
  address String
  createdAt   DateTime     @default(now())
  schoolyears Schoolyear[]
  admins Admin[]
}

model Schoolyear {
  id String @id
  createdAt   DateTime     @default(now())
  endedAt   DateTime?     
  schoolId String
  school      School       @relation(fields: [schoolId], references: [id])
  classYears ClassYear[]
  semestres Semestre[]
  studentFees StudentFees[]

}

model Admin {
  id       String @id
  username String
  email String @unique
  schoolId String
  parent      School       @relation(fields: [schoolId], references: [id])
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id])
  gradeId     Int
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
  classYears ClassYear[]
  studentFees StudentFees[]
  currentClassId String
  currentClass      Class       @relation(fields: [currentClassId], references: [id])

}

model Auth {
  id String @id
  password String 
  email String @unique
  role String  
}
model ClassYear {
  id        String    @id
  schoolYearId String
  classId String
  studentId String
  schoolYear       Schoolyear        @relation(fields: [schoolYearId], references: [id])
  class       Class        @relation(fields: [classId], references: [id])
  student       Student        @relation(fields: [studentId], references: [id])
  isSolded Boolean @default(false)
  paid BigInt @default(0)
  // cette table servira pour les historiques, en une année précise on pourra savoir tel élève fréquentait tel année 
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
  birthday  DateTime
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}



model Class {
  id       String @id
  name     String
  capacity Int
  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  gradeId       Int
  announcements Announcement[]
  classYears ClassYear[]
  fees Fees[]
  currentStudents Student[]
  events EventClass[]
}

model Subject {
  id       String @id
  name     String   
  credit Int @default(1)
  teachers Teacher[]
  lessons  Lesson[]
  exams       Exam[]

}

model Lesson {
  id        String      @id 
  name      String
  day       Day
  credit Int @default(1)
  startTime DateTime
  endTime   DateTime
  subjectId   String
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     String
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  attendances Attendance[]
  files String[]
  keys String[]
  examens Exam[]
}

model Semestre {
  id String @id
  type String
  startTime DateTime
  endTime   DateTime
  schoolYearId String
  schoolYear     Schoolyear      @relation(fields: [schoolYearId], references: [id])
  examens Exam[]    
}
model Exam {
  id        String      @id 
  title     String
  startTime DateTime
  endTime   DateTime
  subjectId String
  files String[]
  keys String[]
  lessonId String 
  lesson Lesson           @relation(fields: [lessonId], references: [id])
  
  semestre     Semestre      @relation(fields: [semestreId], references: [id])
  semestreId String
  subject   Subject   @relation(fields: [subjectId], references: [id])
  results  Result[]
}

model Fees {
  id String @id
  order Int
  classId String
  class     Class      @relation(fields: [classId], references: [id])
  amount BigInt
  studentFees StudentFees[]
}
 model StudentFees {
   id String @id
   amount BigInt
   studentId String
   schoolYearId String
   FeesId String
   fees     Fees      @relation(fields: [FeesId], references: [id])
   schoolYear     Schoolyear      @relation(fields: [schoolYearId], references: [id])
   student     Student      @relation(fields: [studentId], references: [id])

 }

model Result {
  id    String @id
  score Int
  examId       String?
  exam         Exam?       @relation(fields: [examId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean
  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  String
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model Event {
  id          String      @id 
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  eventClass EventClass[]
}

model EventClass {
  id String @id
  eventId String
  classId String
  event   Event @relation(fields: [eventId], references: [id])
  class   Class @relation(fields: [classId], references: [id])

}
model Announcement {
  id          String @id
  title       String
  description String
  date        DateTime
  classId String?
  class   Class? @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}